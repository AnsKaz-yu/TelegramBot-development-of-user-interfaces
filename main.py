import telebot
import sqlite3
from exam import Exam
from exam_progress import ExamProgress
from db import db
from telebot import types
from anecdote import joke
from memory import memory
from graphics import make_graph

bot = telebot.TeleBot('6467477848:AAGiUpgDQX1ePytwoqVzvQ11RUr0O4cMJpc')  # —ç—Ç–æ –Ω–∞—à —Ç–æ–∫–µ–Ω —Ç–∞–∫ —Å–∫–∞–∂–µ–º

MyProgress = ExamProgress()
MyExam = Exam()
Mydb = db()


def menu_markup():
    menu_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ê–Ω–µ–∫–¥–æ—Ç –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
    btn2 = types.KeyboardButton("‚ùì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é")
    btn3 = types.KeyboardButton("üìå –î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω")
    btn4 = types.KeyboardButton("üìì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    btn5 = types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω")
    btn6 = types.KeyboardButton("üìà –ú–æ–π –ø—Ä–æ–≥–µ—Å—Å")
    btn7 = types.KeyboardButton("üí™üèª –Ø –≤—ã—É—á–∏–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!")
    menu_markup.row(btn1, btn2)
    menu_markup.row(btn3, btn5, btn6)
    menu_markup.row(btn4, btn7)
    return menu_markup


def exams_markup(chat_id):
    exam_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    exams = Mydb.get_exams_names(chat_id)
    for exam in exams:
        btn = types.KeyboardButton(exam[0])
        exam_markup.row(btn)
    return exam_markup


#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    global Mydb
    try:
        img = open('–∫–æ—Ç.jpg', 'rb')
        bot.send_photo(message.chat.id, img)
        Mydb.add_user(message.chat.id)
        bot.send_message(message.chat.id,
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–≤–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é!".format(
                             message.from_user), reply_markup=menu_markup())
    except Exception:
        bot.send_message(message.chat.id,
                         text="–ü—Ä–∏–≤–µ—Ç, {0.first_name}. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–±—è –∏ "
                              "–ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —è –º–æ–≥—É –ª–∞–≥–∞—Ç—å.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ—Ä–æ–±—É–π –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É "
                              "/start —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @ans_kaz!".format(
                             message.from_user))


# –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª –Ω–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
@bot.message_handler(content_types=['text'])
def func(message):
    if message.text == "üëã –ê–Ω–µ–∫–¥–æ—Ç –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è":
        bot.send_message(message.chat.id, text=joke())

    elif message.text == "‚ùì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é":
        bot.send_message(message.chat.id, text=memory())

    elif message.text == "üìå –î–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω":
        MyExam.clear()
        bot.send_message(message.from_user.id,
                         "–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω, –ø–æ–∂–∞–ª–π—Å—Ç–≤–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤:")
        bot.send_message(message.from_user.id, "–ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Å–¥–∞—ë–µ—à—å?")
        bot.register_next_step_handler(message, get_name_of_exam)

    elif message.text == "üìì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", url='https://ruz.spbstu.ru/')
        markup.add(button1)
        bot.send_message(message.chat.id,
                         "–ù–∞–π–¥–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —Ç—É—Ç:".format(message.from_user),
                         reply_markup=markup)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω":
        bot.send_message(message.chat.id,
                         "–ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?".format(message.from_user),
                         reply_markup=exams_markup(message.chat.id))
        bot.register_next_step_handler(message, delete_exam)
    elif message.text == "üìà –ú–æ–π –ø—Ä–æ–≥–µ—Å—Å":
        show_exam_progress(message.chat.id)
    elif message.text == "üí™üèª –Ø –≤—ã—É—á–∏–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å!":
        MyProgress.clear()
        bot.send_message(message.chat.id,
                         "–ö—Ä—É—Ç–æ! –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É?".format(message.from_user),
                         reply_markup=exams_markup(message.chat.id))
        bot.register_next_step_handler(message, update_progress_exam_name)
    else:
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω..", reply_markup=menu_markup())


def delete_exam(message):
    global Mydb
    try:
        Mydb.delete_exam(message.text, message.chat.id)
        bot.send_message(message.from_user.id,
                         f"–≠–∫–∑–∞–º–µ–Ω {message.text} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", reply_markup=menu_markup())
    except Exception:
        bot.send_message(message.from_user.id,
                         "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, —ç–∫–∑–∞–º–µ–Ω–∞ —Å —Ç–µ–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=menu_markup())


def show_exam_progress(chat_id):
    global Mydb
    progress_list = []
    try:
        progress_list = Mydb.show_progress(chat_id)
    except Exception:
        bot.send_message(chat_id,
                         "–û–π-–æ–π. –ö–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–æ–µ–º—É —Å–æ–∑–¥–∞—Ç–µ–ª—é @ans.kaz",
                         reply_markup=menu_markup())
    if not progress_list:
        bot.send_message(chat_id,
                         "–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤",
                         reply_markup=menu_markup())
    for i in progress_list:
        if i[1] == None:
            bot.send_message(chat_id, text=f"{i[0]}: 0.0%")
            make_graph(bot, chat_id, 0)
        else:
            bot.send_message(chat_id, text=f"{i[0]}: {'{:.2f}'.format(i[1])}%")
            make_graph(bot, chat_id, i[1])


def update_progress_exam_name(message):
    global MyProgress
    MyProgress.name = message.text
    bot.send_message(message.from_user.id, "–°–∫–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—ã –≤—ã—É—á–∏–ª?")
    bot.register_next_step_handler(message, update_progress_questions_count)


def update_progress_questions_count(message):
    global MyProgress, Mydb
    try:
        MyProgress.progress = int(message.text)
        Mydb.update_progress(MyProgress, message.chat.id)
        bot.send_message(message.chat.id,
                         "–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω".format(message.from_user),
                         reply_markup=menu_markup())
    except Exception:
        bot.send_message(message.chat.id,
                         "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!".format(message.from_user),
                         reply_markup=menu_markup())


def get_name_of_exam(message):
    global MyExam, Mydb
    MyExam.set_name(message.text)
    if MyExam.i_know_all_necessary_information():
        try:
            Mydb.add_exam(MyExam, message.chat.id)
            MyExam.clear()
            bot.send_message(message.chat.id,
                             "–≠–∫–∑–∞–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω".format(message.from_user),
                             reply_markup=menu_markup())

        except Exception:
            bot.send_message(message.chat.id,
                             "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω".format(message.from_user),
                             reply_markup=menu_markup())
    else:
        bot.send_message(message.from_user.id, "–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω?")
        bot.register_next_step_handler(message, get_date_of_exam)


def get_date_of_exam(message):
    global MyExam, Mydb
    try:
        MyExam.set_date(message.text)
    except Exception:
        bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É( –ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—ë —Å–Ω–æ–≤–∞!")
        bot.register_next_step_handler(message, get_date_of_exam)
        return

    if MyExam.i_know_all_necessary_information():
        try:
            Mydb.add_exam(MyExam, message.chat.id)
            MyExam.clear()
            bot.send_message(message.chat.id,
                             "–≠–∫–∑–∞–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω".format(message.from_user),
                             reply_markup=menu_markup())
        except Exception:
            bot.send_message(message.chat.id,
                             "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω".format(message.from_user),
                             reply_markup=menu_markup())
    else:
        bot.send_message(message.from_user.id, "–°–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤/–±–∏–ª–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ –≤—ã—É—á–∏—Ç—å?")
        bot.register_next_step_handler(message, get_count_of_questions)


def get_count_of_questions(message):
    global MyExam, Mydb
    try:
        MyExam.set_questions_count(message.text)
    except Exception:
        bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤( –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"
                                               "(–í–≤–æ–¥–∏ —Ü–∏—Ñ—Ä—ã, –ø–æ–∂–∞–ª–π—Å—Ç–∞)")
        bot.register_next_step_handler(message, get_count_of_questions)
        return

    if MyExam.i_know_all_necessary_information():
        try:
            Mydb.add_exam(MyExam, message.chat.id)
            MyExam.clear()
            bot.send_message(message.chat.id,
                             "–≠–∫–∑–∞–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω".format(message.from_user),
                             reply_markup=menu_markup())
        except sqlite3.Error as error:
            bot.send_message(message.chat.id,
                             "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —ç–∫–∑–∞–º–µ–Ω".format(message.from_user),
                             reply_markup=menu_markup())
    else:
        bot.send_message(message.from_user.id, "–ö–∞–∫–æ–π —ç–∫–∑–∞–º–µ–Ω —Å–¥–∞—ë—à—å?")
        bot.register_next_step_handler(message, get_name_of_exam)


bot.polling(none_stop=True)
